{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/calc.ts","webpack:///./src/main.ts","webpack:///./src/utils.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.ts\");\n","import { Utils as U } from \"./utils\";\r\n\r\nexport interface CalcArg {\r\n    csv: string,\r\n    targetCellNum: number,\r\n    noData: NoDataTreat\r\n}\r\n\r\nexport interface WorkArg {\r\n    indices: Indices;\r\n    saBuf: SharedArrayBuffer;\r\n    targetCellNum: number;\r\n    noData: NoDataTreat;\r\n}\r\n\r\n/** 配列の対象インデックス、開始終了 */\r\ninterface Indices {\r\n    startI: number;\r\n    endI: number;\r\n}\r\n\r\n/** データがない場合の扱い */\r\nexport enum NoDataTreat {\r\n    /** ないものとして計算する */\r\n    ignore,\r\n    /** ゼロとして計算する */\r\n    zero\r\n}\r\n\r\nexport interface CalcResult {\r\n    val: number;\r\n    lineNum: number;\r\n    noDataIdx: number[];\r\n}\r\n\r\nexport class CsvCalc {\r\n    /** 入力元CSV */\r\n    csv: string;\r\n    /** CSVを一文字ずつの配列にしたもの。𩸽対策で文字単位で入れたいため。 */\r\n    csvArr: string[];\r\n    /** Workerとメモリシェアするために */\r\n    buf: SharedArrayBuffer;\r\n    /** SharedArrayBufferを使うためのView */\r\n    bufView: Float32Array;\r\n    /** データなしの場合の扱い規定 */\r\n    noData: NoDataTreat;\r\n    static LINE_SEPARATOR_CODE: number = \"\\n\".charCodeAt(0);\r\n    /** 同時実行ワーカ数 */\r\n    static WORK_NUM: number = 8; // TODO とりあえず８。\r\n    constructor(csv: string, noData: NoDataTreat) {\r\n        this.csv = csv;\r\n        this.noData = noData;\r\n        this.csvToBuf();\r\n    }\r\n\r\n    /** \r\n     * 平均値を含む結果を返す。  \r\n     */\r\n    async getAve(cellNum: number): Promise<CalcResult> {\r\n        const promiz = this.separateAndAssignWork(cellNum);\r\n        const vals = await Promise.all(promiz);\r\n        return U.margeAve(vals, this.noData);\r\n    }\r\n\r\n    /** csvをざっと切ってワーカに渡す、を繰り返す。 */\r\n    private separateAndAssignWork(cellNum: number): Promise<CalcResult>[] {\r\n        let result: Promise<CalcResult>[] = [];\r\n        const length = this.bufView.length;\r\n        /** 均等割りした場合の数。これをもとにざっくり仕事を切っていく */\r\n        const aboutSepIndex = Math.ceil(length / CsvCalc.WORK_NUM);\r\n        let startI = 0;\r\n        for (let i = aboutSepIndex; i < length; i++) {\r\n            if (this.bufView[i] === CsvCalc.LINE_SEPARATOR_CODE || i === length - 1/*最後が改行じゃないかもしれないし・・・*/) {\r\n                // とりあえず次の改行までを仕事範囲とする。\r\n                result.push(this.doWorker(startI, i, cellNum));\r\n                startI = i + 1; // 次のスタートはこの改行の次の文字から\r\n                i = i + aboutSepIndex - 1; // 次の終わりはざっと飛んだあたり、ざっと飛ぶのではあるのだけど一応for文の+1を考慮して-1するような繊細な面も持ち合わせる。\r\n                if (i > length) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // 最後の一回はほとんどの場合半端になるはずなので、ここで実行。\r\n        result.push(this.doWorker(startI, length - 1, cellNum))\r\n        return result;\r\n    }\r\n\r\n    private doWorker(s: number, e: number, cellNum: number): Promise<CalcResult> {\r\n        // TypedArray.prototype.sliceは結局コピーなのでもったいない。開始終了だけ渡す。\r\n        return new Promise((resolve, reject) => {\r\n            const arg: WorkArg = {\r\n                saBuf: this.buf,\r\n                indices: {\r\n                    startI: s,\r\n                    endI: e\r\n                },\r\n                noData: NoDataTreat.ignore,\r\n                targetCellNum: cellNum\r\n            }\r\n            let w = new Worker(\"worker.js\");\r\n            w.onmessage = function (ev) {\r\n                resolve(<CalcResult>ev.data);\r\n            };\r\n            w.postMessage(arg);\r\n        });\r\n    }\r\n    /** 文字列をバッファに変換する */\r\n    csvToBuf() {\r\n        // 一文字ごとの配列にする。\r\n        this.csvArr = Array.from(this.csv);\r\n        // 一文字4最大バイトなのでlenght*4\r\n        this.buf = new SharedArrayBuffer(this.csvArr.length * 4);\r\n        // ArrayBufferをシステムで扱うためにviewを作成\r\n        this.bufView = new Float32Array(this.buf);\r\n        for (let i = 0, l = this.bufView.length; i < l; i++) {\r\n            this.bufView[i] = this.csvArr[i].codePointAt(0);\r\n        }\r\n    }\r\n}\r\n\r\n/** 普通にfor文で計算するパティーン */\r\nexport function normalCalc(arg: CalcArg): CalcResult {\r\n    const csvArr: string[] = Array.from(arg.csv);\r\n    let calcArr: number[] = [];\r\n    console.time(\"calctime\");\r\n    const parseArg = { csvArr: csvArr, calcArr: calcArr, currentCellStartI: 0, i: 0, cellNum: 0, targetCellNum: arg.targetCellNum };\r\n    for (const l = csvArr.length; parseArg.i < l; parseArg.i++) {\r\n        U.parseCSV(parseArg);\r\n    }\r\n    console.timeEnd(\"calctime\");\r\n    return U.getAve(calcArr, arg.noData);\r\n}","import * as calc from \"./calc\";\r\nimport { NoDataTreat as NDT, CalcArg as CArg, CalcResult as CRslt } from \"./calc\";\r\n\r\nenum WorkType {\r\n    webworker,\r\n    normal\r\n}\r\n\r\nlet w = new Worker(\"worker.js\");\r\nconst wb = document.getElementById(\"workbtn\");\r\nconst cg = document.getElementById(\"csvget\");\r\nlet sb = new SharedArrayBuffer(12);\r\nlet bufView = new Float32Array(sb);\r\n\r\nwb.onclick = function () {\r\n    w.postMessage(sb);\r\n    setTimeout(function () {\r\n        for (let i = 0; i < 10; i++) {\r\n            console.log(bufView[i])\r\n        }\r\n    }, 1000)\r\n};\r\n\r\ncg.onclick = function () {\r\n    const a = new XMLHttpRequest();\r\n    a.open(\"GET\", \"http://127.0.0.1:8000/bigfile/rice.csv\", true);\r\n    a.send();\r\n    a.onreadystatechange = function () {\r\n        if (a.readyState === XMLHttpRequest.DONE) {\r\n            requestCalc({ csv: a.responseText, targetCellNum: 5, noData: NDT.ignore }, getWorkType());\r\n        }\r\n    }\r\n}\r\n\r\n/** 画面のワークタイプ選択ラジオボタンからワークタイプを割り出す */\r\nfunction getWorkType(): WorkType {\r\n    const wr = <HTMLFormElement>document.getElementById(\"worktype-radio\");\r\n    return <WorkType>(parseInt(wr[\"worktype\"].value));\r\n}\r\n\r\nasync function requestCalc(arg: CArg, worktype: WorkType) {\r\n    let result: calc.CalcResult;\r\n    let time = Date.now();\r\n    switch (worktype) {\r\n        case WorkType.webworker:\r\n            const c = new calc.CsvCalc(arg.csv, arg.noData);\r\n            result = await c.getAve(arg.targetCellNum);\r\n            break;\r\n        case WorkType.normal:\r\n            result = calc.normalCalc(arg);\r\n            break;\r\n        default:\r\n            alert(\"worktypeがおかしいんじゃ:\" + worktype);\r\n    }\r\n    time = Date.now() - time;\r\n    resultOutPut(result, time, worktype);\r\n}\r\n\r\nfunction resultOutPut(result: CRslt, ms: number, worktype: WorkType) {\r\n    const resultstr = result ? \"worktype:\" + WorkType[worktype] + \"<br>time:\" + ms + \"ms\" + \"<br>linenum:\" + result.lineNum + \"<br>ave:\" + result.val + \"<br>nodata:\" + result.noDataIdx.length : \"null!\";\r\n    const d = <HTMLDivElement>document.getElementById(\"calc-result\");\r\n    d.innerHTML = resultstr;\r\n}","import { NoDataTreat, CalcResult } from \"./calc\";\r\n\r\nexport namespace Utils {\r\n    const CSV_SEP = \",\";\r\n    const LINE_SEP = \"\\n\";\r\n    const CSV_SEP_CODE = CSV_SEP.codePointAt(0);\r\n    const LINE_SEP_CODE = LINE_SEP.codePointAt(0);\r\n    const TRIM_STR_CODE = \"\\\"\".codePointAt(0);\r\n\r\n    /** CSVパーサ。ダブルクォートなどはまったく考慮していない。 */\r\n    export function parseCSV(arg: { csvArr: string[], calcArr: number[], currentCellStartI: number, i: number, cellNum: number, targetCellNum: number }): void {\r\n        switch (arg.csvArr[arg.i]) {\r\n            case CSV_SEP:\r\n            case LINE_SEP:\r\n                // セルの終わりなので、現在のセル確認\r\n                if (arg.cellNum === arg.targetCellNum) {\r\n                    // 現在ターゲットセルにいれば、中身を計算対象に入れる。数値じゃなきゃNaNを入れて、後処理で頑張ってもらう。\r\n                    arg.calcArr.push(parseFloat((arg.csvArr.slice(arg.currentCellStartI, arg.i).join(\"\")).replace(/^\\\"+|\\\"+$/g, \"\")));\r\n                }\r\n                arg.currentCellStartI = arg.i + 1; // 次の文字がセル開始位置\r\n                if (arg.csvArr[arg.i] === CSV_SEP) {\r\n                    // セル区切りなのでセル番を更新\r\n                    arg.cellNum++;\r\n                } else if (arg.csvArr[arg.i] === LINE_SEP) {\r\n                    // 行区切りなので、セル番をリセット\r\n                    arg.cellNum = 0;\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    /** TypedArrayベース用のCSVパーサ */\r\n    export function parseCSVForBuf(arg: { csvBuf: Float32Array, calcArr: number[], currentCellStartI: number, i: number, cellNum: number, targetCellNum: number }): void {\r\n        switch (arg.csvBuf[arg.i]) {\r\n            case CSV_SEP_CODE:\r\n            case LINE_SEP_CODE:\r\n                // セルの終わりなので、現在のセル確認\r\n                if (arg.cellNum === arg.targetCellNum) {\r\n                    // 現在ターゲットセルにいれば、中身を計算対象に入れる。数値じゃなきゃNaNを入れて、後処理で頑張ってもらう。\r\n                    arg.calcArr.push(parseFloat(getStrArrFromF32Arr(arg.currentCellStartI, arg.i, arg.csvBuf, TRIM_STR_CODE)));\r\n                }\r\n                arg.currentCellStartI = arg.i + 1; // 次の文字がセル開始位置\r\n                if (arg.csvBuf[arg.i] === CSV_SEP_CODE) {\r\n                    // セル区切りなのでセル番を更新\r\n                    arg.cellNum++;\r\n                } else if (arg.csvBuf[arg.i] === LINE_SEP_CODE) {\r\n                    // 行区切りなので、セル番をリセット\r\n                    arg.cellNum = 0;\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    function getStrArrFromF32Arr(s: number, e: number, f: Float32Array, trimStrCode: number): string {\r\n        let frontTrimNum = 0;\r\n        let backTrimNum = 0;\r\n        // 前のtrim探し\r\n        for (let i = s; i < e; i++) {\r\n            if (f[i] === trimStrCode) {\r\n                frontTrimNum++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // 後ろのtrim探し\r\n        for (let i = e - 1; i > s; i--) {\r\n            if (f[i] === trimStrCode) {\r\n                backTrimNum++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        let result: string[] = [];\r\n        // trim後の文字列を生成\r\n        for (let i = s + frontTrimNum, l = e - backTrimNum; i < l; i++) {\r\n            result.push(String.fromCodePoint(f[i]));\r\n        }\r\n        return result.join(\"\");\r\n    }\r\n\r\n\r\n    export function getAve(calcArr: number[], ndt: NoDataTreat): CalcResult {\r\n        let noData: number[] = [];\r\n        let sum = 0;\r\n        for (let i = 0, l = calcArr.length; i < l; i++) {\r\n            if (!isNaN(calcArr[i])) {\r\n                // 数値は普通に足す\r\n                sum += calcArr[i];\r\n            } else {\r\n                // データなし配列に添字を入れる\r\n                noData.push(i);\r\n            }\r\n        }\r\n        // Noデータを０扱いするかどうかで割り算を変える\r\n        const result = sum / (ndt === NoDataTreat.zero ? calcArr.length : calcArr.length - noData.length);\r\n        return { val: result, lineNum: calcArr.length, noDataIdx: noData };\r\n    }\r\n\r\n    export function margeAve(rs: CalcResult[], ndt: NoDataTreat): CalcResult {\r\n        let tmpresult: CalcResult = { lineNum: 0, noDataIdx: [], val: 0 };\r\n        for (let i = 0, l = rs.length; i < l; i++) {\r\n            switch (ndt) {\r\n                case NoDataTreat.ignore:\r\n                    tmpresult.val += rs[i].val * (rs[i].lineNum - rs[i].noDataIdx.length);\r\n                    break;\r\n                case NoDataTreat.zero:\r\n                    tmpresult.val += rs[i].val * rs[i].lineNum;\r\n                    break;\r\n                default:\r\n            }\r\n            tmpresult.lineNum += rs[i].lineNum;\r\n            tmpresult.noDataIdx = tmpresult.noDataIdx.concat(rs[i].noDataIdx);\r\n        }\r\n        let result = tmpresult;\r\n        switch (ndt) {\r\n            case NoDataTreat.ignore:\r\n                result.val = result.val / (result.lineNum - result.noDataIdx.length);\r\n                break;\r\n            case NoDataTreat.zero:\r\n                result.val = result.val / result.lineNum;\r\n                break;\r\n            default:\r\n        }\r\n        return result;\r\n    }\r\n}"],"sourceRoot":""}