{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/calc.ts","webpack:///./src/utils.ts","webpack:///./src/worker.ts"],"names":[],"mappings":"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","file":"worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/worker.ts\");\n","import { Utils as U } from \"./utils\";\r\n\r\nexport interface CalcArg {\r\n    csv: string,\r\n    targetCellNum: number,\r\n    noData: NoDataTreat\r\n}\r\n\r\nexport interface WorkArg {\r\n    indices: Indices;\r\n    saBuf: SharedArrayBuffer;\r\n    targetCellNum: number;\r\n    noData: NoDataTreat;\r\n}\r\n\r\n/** 配列の対象インデックス、開始終了 */\r\ninterface Indices {\r\n    startI: number;\r\n    endI: number;\r\n}\r\n\r\n/** データがない場合の扱い */\r\nexport enum NoDataTreat {\r\n    /** ないものとして計算する */\r\n    ignore,\r\n    /** ゼロとして計算する */\r\n    zero\r\n}\r\n\r\n/** 計算結果 */\r\nexport interface CalcResult {\r\n    val: number;\r\n    lineNum: number;\r\n    noDataNum: number;\r\n    invalidDataNum: number;\r\n}\r\n\r\nexport class CsvCalc {\r\n    /** workerプール */\r\n    workerPool: Worker[];\r\n    /** wi */\r\n    workerIndex: number;\r\n    /** 入力元CSV */\r\n    csv: string;\r\n    /** Workerとメモリシェアするために */\r\n    buf: SharedArrayBuffer;\r\n    /** SharedArrayBufferを使うためのView */\r\n    bufView: Float32Array;\r\n    /** データなしの場合の扱い規定 */\r\n    noData: NoDataTreat;\r\n    static LINE_SEPARATOR_CODE: number = \"\\n\".charCodeAt(0);\r\n    /** 同時実行ワーカ数 */\r\n    static WORK_NUM: number = 4; // TODO とりあえず８。\r\n    constructor(csv: string, noData: NoDataTreat) {\r\n        this.csv = csv;\r\n        this.noData = noData;\r\n        this.csvToBuf();\r\n        this.initWorker();\r\n        this.workerIndex = 0;\r\n    }\r\n\r\n    /** \r\n     * 平均値を含む結果を返す。  \r\n     */\r\n    async getAve(cellNum: number): Promise<CalcResult> {\r\n        const promiz = this.separateAndAssignWork(cellNum);\r\n        const vals = await Promise.all(promiz);\r\n        return U.margeAve(vals, this.noData);\r\n    }\r\n\r\n    /** csvをざっと切ってワーカに渡す、を繰り返す。 */\r\n    private separateAndAssignWork(cellNum: number): Promise<CalcResult>[] {\r\n        let result: Promise<CalcResult>[] = [];\r\n        const length = this.bufView.length;\r\n        /** 均等割りした場合の数。これをもとにざっくり仕事を切っていく */\r\n        const aboutSepIndex = Math.ceil(length / CsvCalc.WORK_NUM);\r\n        let startI = 0;\r\n        for (let i = aboutSepIndex; i < length; i++) {\r\n            if (this.bufView[i] === CsvCalc.LINE_SEPARATOR_CODE || i === length - 1/*最後が改行じゃないかもしれないし・・・*/) {\r\n                // とりあえず次の改行までを仕事範囲とする。\r\n                result.push(this.doWorker(startI, i, cellNum));\r\n                startI = i + 1; // 次のスタートはこの改行の次の文字から\r\n                i = i + aboutSepIndex - 1; // 次の終わりはざっと飛んだあたり、ざっと飛ぶのではあるのだけど一応for文の+1を考慮して-1するような繊細な面も持ち合わせる。\r\n                if (i > length) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // 最後の一回はほとんどの場合半端になるはずなので、ここで実行。\r\n        result.push(this.doWorker(startI, length - 1, cellNum))\r\n        return result;\r\n    }\r\n\r\n    private doWorker(s: number, e: number, cellNum: number): Promise<CalcResult> {\r\n        // TypedArray.prototype.sliceは結局コピーなのでもったいない。開始終了だけ渡す。\r\n        return new Promise((resolve, reject) => {\r\n            const arg: WorkArg = {\r\n                saBuf: this.buf,\r\n                indices: {\r\n                    startI: s,\r\n                    endI: e\r\n                },\r\n                noData: NoDataTreat.ignore,\r\n                targetCellNum: cellNum\r\n            }\r\n            let w = this.getWorker();\r\n            w.onmessage = function (ev) {\r\n                resolve(<CalcResult>ev.data);\r\n                w.terminate();\r\n            };\r\n            w.postMessage(arg);\r\n        });\r\n    }\r\n    /** 文字列をバッファに変換する */\r\n    csvToBuf() {\r\n        // 一文字4最大バイトなのでlenght*4\r\n        this.buf = new SharedArrayBuffer(this.csv.length * 4);\r\n        // ArrayBufferをシステムで扱うためにviewを作成\r\n        this.bufView = new Float32Array(this.buf);\r\n        const ite = this.csv[Symbol.iterator]();\r\n        let i = 0;\r\n        for (let v of ite) {\r\n            this.bufView[i] = v.codePointAt(0);\r\n            i++;\r\n        }\r\n        this.bufView = this.bufView.slice(0, i);\r\n    }\r\n    initWorker() {\r\n        this.workerPool = [];\r\n        for (let i = 0; i < CsvCalc.WORK_NUM; i++) {\r\n            this.workerPool.push(new Worker(\"worker.js\"));\r\n        }\r\n    }\r\n    getWorker() {\r\n        this.workerIndex++;\r\n        if (this.workerIndex >= CsvCalc.WORK_NUM) {\r\n            this.workerIndex = 0;\r\n        }\r\n        return this.workerPool[this.workerIndex];\r\n    }\r\n}\r\n\r\n/** 普通にfor文で計算するパティーン */\r\nexport function normalCalc(arg: CalcArg): CalcResult {\r\n    console.time(\"nParseTime\");\r\n    const parse = U.parseCSVKai(arg.csv[Symbol.iterator](), (v: string) => v, U.CSV_SEP, U.LINE_SEP, arg.targetCellNum);\r\n    console.timeEnd(\"nParseTime\");\r\n    let calcArr: number[] = [];\r\n    for (let i = 0, l = parse.targetArr.length; i < l; i++) {\r\n        calcArr.push(parseFloat((parse.targetArr[i]).replace(/^\\\"+|\\\"+$/g, \"\")))\r\n    }\r\n    return U.getAve(calcArr, parse.lineNum, arg.noData);\r\n}","import { NoDataTreat, CalcResult } from \"./calc\";\r\n\r\nexport namespace Utils {\r\n    export const CSV_SEP = \",\";\r\n    export const LINE_SEP = \"\\n\";\r\n    export const CSV_SEP_CODE = CSV_SEP.codePointAt(0);\r\n    export const LINE_SEP_CODE = LINE_SEP.codePointAt(0);\r\n    export const TRIM_STR_CODE = \"\\\"\".codePointAt(0);\r\n\r\n    /** CSVパーサ。ダブルクォートなどはまったく考慮していない。 */\r\n    export function parseCSV(arg: { csvArr: string[], calcArr: number[], currentCellStartI: number, i: number, cellNum: number, targetCellNum: number }): void {\r\n        switch (arg.csvArr[arg.i]) {\r\n            case CSV_SEP:\r\n            case LINE_SEP:\r\n                // セルの終わりなので、現在のセル確認\r\n                if (arg.cellNum === arg.targetCellNum) {\r\n                    // 現在ターゲットセルにいれば、中身を計算対象に入れる。数値じゃなきゃNaNを入れて、後処理で頑張ってもらう。\r\n                    arg.calcArr.push(parseFloat((arg.csvArr.slice(arg.currentCellStartI, arg.i).join(\"\")).replace(/^\\\"+|\\\"+$/g, \"\")));\r\n                }\r\n                arg.currentCellStartI = arg.i + 1; // 次の文字がセル開始位置\r\n                if (arg.csvArr[arg.i] === CSV_SEP) {\r\n                    // セル区切りなのでセル番を更新\r\n                    arg.cellNum++;\r\n                } else if (arg.csvArr[arg.i] === LINE_SEP) {\r\n                    // 行区切りなので、セル番をリセット\r\n                    arg.cellNum = 0;\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    interface ParseResult {\r\n        targetArr: string[];\r\n        lineNum: number;\r\n    }\r\n\r\n    /** \r\n     * CSVパーサ。イテレータを渡すことで型に縛られずにイテレートする。  \r\n     * 文字コードUTF-8, 改行LF(\\n), 禁則文字[\",\",\"\\n\"]\r\n     * @param ite 元CSVデータのイテレータ。stringでもTypedArrayでも、hoge[Symbol.iterator]()でイテレータは取得できる。\r\n     * @param tostr valueをstringに変換するfunction。TypedArrayで必要なはず。\r\n     * @param csvSep CSVのセパレータ。文字列戻したりしたくはないので、そのまま判別したいので。\r\n     * @param lineSep 行セパレータ。同上。\r\n     * @param targetCellNum 返却対象のセル番号。\r\n     */\r\n    export function parseCSVKai<T>(ite: IterableIterator<T>, tostr: (a: T) => string, csvSep: T, lineSep: T, targetCellNum: number): ParseResult {\r\n        let targetCellVal: string[] = [];\r\n        /** 空セルは配列に入らない（飛ばされる） */\r\n        let targetArr: string[] = [];\r\n        let currentCellNum = 0;\r\n        let lineNum = 1;\r\n        let lastChar: T;\r\n\r\n        for (let t = ite.next(); t && t.value; t = ite.next()) {\r\n            lastChar = t.value;\r\n            switch (lastChar) {\r\n                case csvSep:\r\n                    currentCellNum++;\r\n                    break;\r\n                case lineSep:\r\n                    currentCellNum = 0;\r\n                    lineNum++;\r\n                    break;\r\n                default:\r\n                // nothing to do\r\n            }\r\n            if (currentCellNum === targetCellNum) {\r\n                if (lastChar !== csvSep && lastChar !== lineSep) {\r\n                    // 当該セル内で、かつセパレータは邪魔なので除く\r\n                    targetCellVal.push(tostr(lastChar));\r\n                }\r\n            } else {\r\n                if (targetCellVal.length !== 0) {\r\n                    // 内容をpush\r\n                    targetArr.push(targetCellVal.join(\"\"));\r\n                    targetCellVal = [];\r\n                }\r\n            }\r\n        }\r\n        if (lastChar === lineSep) {\r\n            // 最後が改行なら、次の行はカウントしないので一歩下がっておく\r\n            lineNum--;\r\n        }\r\n        return { targetArr, lineNum };\r\n    }\r\n\r\n    export function getAve(calcArr: number[], lineNum: number, ndt: NoDataTreat): CalcResult {\r\n        let invalidData: number[] = [];\r\n        let sum = 0;\r\n        for (let i = 0, l = calcArr.length; i < l; i++) {\r\n            if (!isNaN(calcArr[i])) {\r\n                // 数値は普通に足す\r\n                sum += calcArr[i];\r\n            } else {\r\n                // データなし配列に添字を入れる\r\n                invalidData.push(i);\r\n            }\r\n        }\r\n        // Noデータを０扱いするかどうかで割り算を変える\r\n        const result = sum / (ndt === NoDataTreat.zero ? lineNum : calcArr.length - invalidData.length);\r\n        return { val: result, lineNum, noDataNum: lineNum - calcArr.length, invalidDataNum: invalidData.length };\r\n    }\r\n\r\n    export function margeAve(rs: CalcResult[], ndt: NoDataTreat): CalcResult {\r\n        let tmpresult: CalcResult = { lineNum: 0, val: 0, noDataNum: 0, invalidDataNum: 0 };\r\n        for (let i = 0, l = rs.length; i < l; i++) {\r\n            switch (ndt) {\r\n                case NoDataTreat.ignore:\r\n                    tmpresult.val += rs[i].val * (rs[i].lineNum - rs[i].noDataNum - rs[i].invalidDataNum);\r\n                    break;\r\n                case NoDataTreat.zero:\r\n                    tmpresult.val += rs[i].val * rs[i].lineNum;\r\n                    break;\r\n                default:\r\n            }\r\n            tmpresult.lineNum += rs[i].lineNum;\r\n            tmpresult.invalidDataNum += rs[i].invalidDataNum;\r\n            tmpresult.noDataNum += rs[i].noDataNum;\r\n        }\r\n        let result = tmpresult;\r\n        switch (ndt) {\r\n            case NoDataTreat.ignore:\r\n                result.val = result.val / (result.lineNum - result.noDataNum - result.invalidDataNum);\r\n                break;\r\n            case NoDataTreat.zero:\r\n                result.val = result.val / result.lineNum;\r\n                break;\r\n            default:\r\n        }\r\n        return result;\r\n    }\r\n}","import { WorkArg, CalcResult } from \"./calc.js\";\r\nimport { Utils as U } from \"./utils\";\r\n\r\nonmessage = function (e) {\r\n    const arg = <WorkArg>e.data;\r\n    console.time(\"sliceCopyTime\");\r\n    let buf = new Float32Array(arg.saBuf).slice(arg.indices.startI, arg.indices.endI);\r\n    console.timeEnd(\"sliceCopyTime\");\r\n    console.time(\"parseTimework\");\r\n    const parse = U.parseCSVKai<number>(buf[Symbol.iterator](), (a: number) => String.fromCodePoint(a), U.CSV_SEP_CODE, U.LINE_SEP_CODE, arg.targetCellNum);\r\n    console.timeEnd(\"parseTimework\")\r\n    let calcArr: number[] = [];\r\n    for (let i = 0, l = parse.targetArr.length; i < l; i++) {\r\n        calcArr.push(parseFloat((parse.targetArr[i]).replace(/^\\\"+|\\\"+$/g, \"\")))\r\n    }\r\n    postMessage(U.getAve(calcArr, parse.lineNum, arg.noData));\r\n}"],"sourceRoot":""}